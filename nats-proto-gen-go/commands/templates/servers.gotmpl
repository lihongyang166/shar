{{- /*gotype: natsgen/types.TemplateInput*/ -}}
// Code generated by nats-proto-gen-go. DO NOT EDIT.
package {{.OutputPackageName}}

import (
    {{.PackagePath}}
    "github.com/nats-io/nats.go"
    "gitlab.com/shar-workflow/nats-proto-gen-go/core"
    "sync"
    "fmt"
)

{{- range .Services}}
{{- print "\n" }}
type {{.Name}}Server struct {
    server {{.Name}}
    panicRecovery bool
    subs          *sync.Map
}
func New{{.Name}}Server(server {{.Name}}, panicRecovery bool) *{{.Name}}Server {
    s := &{{.Name}}Server{
		server: server,
        panicRecovery: panicRecovery,
		subs: &sync.Map{},
    }
	return s
}

func (s *{{.Name}}Server) Listen(con *nats.Conn, middleware []core.Handler, errorHandler core.ErrorHandler) error {
    if errorHandler == nil {
        errorHandler = core.DefaultErrorHandler
    }
    {{- range .Methods}}
    if err := core.Listen(con, s.panicRecovery, s.subs, middleware, errorHandler, "{{$.MessagePrefix}}{{.Name}}{{$.MessageSuffix}}", &{{$.TypePackage}}.{{.InParam.Typ}}{}, s.server.{{.Name}}); err != nil {
        return fmt.Errorf("{{$.MessagePrefix}}{{.Name}}{{$.MessageSuffix}}: %w", err)
    }
    {{- end}}
    {{- end}}
    return nil
}
