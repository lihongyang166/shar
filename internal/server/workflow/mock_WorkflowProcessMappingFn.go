// Code generated by mockery v2.43.1. DO NOT EDIT.

package workflow

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/shar-workflow/shar/model"
)

// MockWorkflowProcessMappingFn is an autogenerated mock type for the WorkflowProcessMappingFn type
type MockWorkflowProcessMappingFn struct {
	mock.Mock
}

type MockWorkflowProcessMappingFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflowProcessMappingFn) EXPECT() *MockWorkflowProcessMappingFn_Expecter {
	return &MockWorkflowProcessMappingFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, wf, i
func (_m *MockWorkflowProcessMappingFn) Execute(ctx context.Context, wf *model.Workflow, i *model.Process) (uint64, error) {
	ret := _m.Called(ctx, wf, i)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow, *model.Process) (uint64, error)); ok {
		return rf(ctx, wf, i)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow, *model.Process) uint64); ok {
		r0 = rf(ctx, wf, i)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Workflow, *model.Process) error); ok {
		r1 = rf(ctx, wf, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflowProcessMappingFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockWorkflowProcessMappingFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - wf *model.Workflow
//   - i *model.Process
func (_e *MockWorkflowProcessMappingFn_Expecter) Execute(ctx interface{}, wf interface{}, i interface{}) *MockWorkflowProcessMappingFn_Execute_Call {
	return &MockWorkflowProcessMappingFn_Execute_Call{Call: _e.mock.On("Execute", ctx, wf, i)}
}

func (_c *MockWorkflowProcessMappingFn_Execute_Call) Run(run func(ctx context.Context, wf *model.Workflow, i *model.Process)) *MockWorkflowProcessMappingFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Workflow), args[2].(*model.Process))
	})
	return _c
}

func (_c *MockWorkflowProcessMappingFn_Execute_Call) Return(_a0 uint64, _a1 error) *MockWorkflowProcessMappingFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflowProcessMappingFn_Execute_Call) RunAndReturn(run func(context.Context, *model.Workflow, *model.Process) (uint64, error)) *MockWorkflowProcessMappingFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflowProcessMappingFn creates a new instance of MockWorkflowProcessMappingFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowProcessMappingFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowProcessMappingFn {
	mock := &MockWorkflowProcessMappingFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
