// Code generated by mockery v2.43.1. DO NOT EDIT.

package workflow

import mock "github.com/stretchr/testify/mock"

// MockPublishOpt is an autogenerated mock type for the PublishOpt type
type MockPublishOpt struct {
	mock.Mock
}

type MockPublishOpt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublishOpt) EXPECT() *MockPublishOpt_Expecter {
	return &MockPublishOpt_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: n
func (_m *MockPublishOpt) Apply(n *publishOptions) {
	_m.Called(n)
}

// MockPublishOpt_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockPublishOpt_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - n *publishOptions
func (_e *MockPublishOpt_Expecter) Apply(n interface{}) *MockPublishOpt_Apply_Call {
	return &MockPublishOpt_Apply_Call{Call: _e.mock.On("Apply", n)}
}

func (_c *MockPublishOpt_Apply_Call) Run(run func(n *publishOptions)) *MockPublishOpt_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*publishOptions))
	})
	return _c
}

func (_c *MockPublishOpt_Apply_Call) Return() *MockPublishOpt_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublishOpt_Apply_Call) RunAndReturn(run func(*publishOptions)) *MockPublishOpt_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublishOpt creates a new instance of MockPublishOpt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublishOpt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublishOpt {
	mock := &MockPublishOpt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
