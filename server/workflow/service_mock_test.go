// Code generated by mockery v2.33.1. DO NOT EDIT.

package workflow

import (
	context "context"

	common "gitlab.com/shar-workflow/shar/common"

	mock "github.com/stretchr/testify/mock"

	model "gitlab.com/shar-workflow/shar/model"

	services "gitlab.com/shar-workflow/shar/server/services"

	storage "gitlab.com/shar-workflow/shar/server/services/storage"
)

// MockNatsService is an autogenerated mock type for the NatsService type
type MockNatsService struct {
	mock.Mock
}

// CheckProcessTaskDeprecation provides a mock function with given fields: ctx, _a1, processName
func (_m *MockNatsService) CheckProcessTaskDeprecation(ctx context.Context, _a1 *model.Workflow, processName string) error {
	ret := _m.Called(ctx, _a1, processName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow, string) error); ok {
		r0 = rf(ctx, _a1, processName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseUserTask provides a mock function with given fields: ctx, trackingID
func (_m *MockNatsService) CloseUserTask(ctx context.Context, trackingID string) error {
	ret := _m.Called(ctx, trackingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trackingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn provides a mock function with given fields:
func (_m *MockNatsService) Conn() common.NatsConn {
	ret := _m.Called()

	var r0 common.NatsConn
	if rf, ok := ret.Get(0).(func() common.NatsConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NatsConn)
		}
	}

	return r0
}

// CreateExecution provides a mock function with given fields: ctx, wfInstance
func (_m *MockNatsService) CreateExecution(ctx context.Context, wfInstance *model.Execution) (*model.Execution, error) {
	ret := _m.Called(ctx, wfInstance)

	var r0 *model.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Execution) (*model.Execution, error)); ok {
		return rf(ctx, wfInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Execution) *model.Execution); ok {
		r0 = rf(ctx, wfInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Execution) error); ok {
		r1 = rf(ctx, wfInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, job
func (_m *MockNatsService) CreateJob(ctx context.Context, job *model.WorkflowState) (string, error) {
	ret := _m.Called(ctx, job)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) (string, error)); ok {
		return rf(ctx, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) string); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WorkflowState) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProcessInstance provides a mock function with given fields: ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId
func (_m *MockNatsService) CreateProcessInstance(ctx context.Context, workflowInstanceID string, parentProcessID string, parentElementID string, processName string, workflowName string, workflowId string) (*model.ProcessInstance, error) {
	ret := _m.Called(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)

	var r0 *model.ProcessInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (*model.ProcessInstance, error)); ok {
		return rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) *model.ProcessInstance); ok {
		r0 = rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProcessInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, trackingID
func (_m *MockNatsService) DeleteJob(ctx context.Context, trackingID string) error {
	ret := _m.Called(ctx, trackingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trackingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyProcessInstance provides a mock function with given fields: ctx, state, pi, wi
func (_m *MockNatsService) DestroyProcessInstance(ctx context.Context, state *model.WorkflowState, pi *model.ProcessInstance, wi *model.Execution) error {
	ret := _m.Called(ctx, state, pi, wi)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState, *model.ProcessInstance, *model.Execution) error); ok {
		r0 = rf(ctx, state, pi, wi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureServiceTaskConsumer provides a mock function with given fields: uid
func (_m *MockNatsService) EnsureServiceTaskConsumer(uid string) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetElement provides a mock function with given fields: ctx, state
func (_m *MockNatsService) GetElement(ctx context.Context, state *model.WorkflowState) (*model.Element, error) {
	ret := _m.Called(ctx, state)

	var r0 *model.Element
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) (*model.Element, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) *model.Element); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Element)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WorkflowState) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecution provides a mock function with given fields: ctx, workflowInstanceID
func (_m *MockNatsService) GetExecution(ctx context.Context, workflowInstanceID string) (*model.Execution, error) {
	ret := _m.Called(ctx, workflowInstanceID)

	var r0 *model.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Execution, error)); ok {
		return rf(ctx, workflowInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Execution); ok {
		r0 = rf(ctx, workflowInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayInstance provides a mock function with given fields: ctx, gatewayInstanceID
func (_m *MockNatsService) GetGatewayInstance(ctx context.Context, gatewayInstanceID string) (*model.Gateway, error) {
	ret := _m.Called(ctx, gatewayInstanceID)

	var r0 *model.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Gateway, error)); ok {
		return rf(ctx, gatewayInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Gateway); ok {
		r0 = rf(ctx, gatewayInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gatewayInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayInstanceID provides a mock function with given fields: state
func (_m *MockNatsService) GetGatewayInstanceID(state *model.WorkflowState) (string, string, error) {
	ret := _m.Called(state)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.WorkflowState) (string, string, error)); ok {
		return rf(state)
	}
	if rf, ok := ret.Get(0).(func(*model.WorkflowState) string); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.WorkflowState) string); ok {
		r1 = rf(state)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*model.WorkflowState) error); ok {
		r2 = rf(state)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetJob provides a mock function with given fields: ctx, id
func (_m *MockNatsService) GetJob(ctx context.Context, id string) (*model.WorkflowState, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.WorkflowState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowState, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowState); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestVersion provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) GetLatestVersion(ctx context.Context, workflowName string) (string, error) {
	ret := _m.Called(ctx, workflowName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, workflowName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOldState provides a mock function with given fields: ctx, id
func (_m *MockNatsService) GetOldState(ctx context.Context, id string) (*model.WorkflowState, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.WorkflowState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowState, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowState); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessHistory provides a mock function with given fields: ctx, processInstanceId
func (_m *MockNatsService) GetProcessHistory(ctx context.Context, processInstanceId string) ([]*model.ProcessHistoryEntry, error) {
	ret := _m.Called(ctx, processInstanceId)

	var r0 []*model.ProcessHistoryEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.ProcessHistoryEntry, error)); ok {
		return rf(ctx, processInstanceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.ProcessHistoryEntry); ok {
		r0 = rf(ctx, processInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProcessHistoryEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessInstance provides a mock function with given fields: ctx, processInstanceID
func (_m *MockNatsService) GetProcessInstance(ctx context.Context, processInstanceID string) (*model.ProcessInstance, error) {
	ret := _m.Called(ctx, processInstanceID)

	var r0 *model.ProcessInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ProcessInstance, error)); ok {
		return rf(ctx, processInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ProcessInstance); ok {
		r0 = rf(ctx, processInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProcessInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskSpecByUID provides a mock function with given fields: ctx, uid
func (_m *MockNatsService) GetTaskSpecByUID(ctx context.Context, uid string) (*model.TaskSpec, error) {
	ret := _m.Called(ctx, uid)

	var r0 *model.TaskSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TaskSpec, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TaskSpec); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskSpecUID provides a mock function with given fields: ctx, name
func (_m *MockNatsService) GetTaskSpecUID(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflow provides a mock function with given fields: ctx, workflowID
func (_m *MockNatsService) GetWorkflow(ctx context.Context, workflowID string) (*model.Workflow, error) {
	ret := _m.Called(ctx, workflowID)

	var r0 *model.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Workflow, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Workflow); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowNameFor provides a mock function with given fields: ctx, processName
func (_m *MockNatsService) GetWorkflowNameFor(ctx context.Context, processName string) (string, error) {
	ret := _m.Called(ctx, processName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, processName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, processName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowVersions provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) GetWorkflowVersions(ctx context.Context, workflowName string) (*model.WorkflowVersions, error) {
	ret := _m.Called(ctx, workflowName)

	var r0 *model.WorkflowVersions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowVersions, error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowVersions); ok {
		r0 = rf(ctx, workflowName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowVersions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutionProcesses provides a mock function with given fields: ctx, id
func (_m *MockNatsService) ListExecutionProcesses(ctx context.Context, id string) ([]string, error) {
	ret := _m.Called(ctx, id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutions provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) ListExecutions(ctx context.Context, workflowName string) (chan *model.ListExecutionResult, chan error) {
	ret := _m.Called(ctx, workflowName)

	var r0 chan *model.ListExecutionResult
	var r1 chan error
	if rf, ok := ret.Get(0).(func(context.Context, string) (chan *model.ListExecutionResult, chan error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) chan *model.ListExecutionResult); ok {
		r0 = rf(ctx, workflowName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *model.ListExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) chan error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: ctx
func (_m *MockNatsService) ListWorkflows(ctx context.Context) (chan *model.ListWorkflowResult, chan error) {
	ret := _m.Called(ctx)

	var r0 chan *model.ListWorkflowResult
	var r1 chan error
	if rf, ok := ret.Get(0).(func(context.Context) (chan *model.ListWorkflowResult, chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) chan *model.ListWorkflowResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *model.ListWorkflowResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// OwnerID provides a mock function with given fields: name
func (_m *MockNatsService) OwnerID(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OwnerName provides a mock function with given fields: id
func (_m *MockNatsService) OwnerName(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishMessage provides a mock function with given fields: ctx, name, key, vars
func (_m *MockNatsService) PublishMessage(ctx context.Context, name string, key string, vars []byte, executionId string, elementId string) error {
	ret := _m.Called(ctx, name, key, vars)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, name, key, vars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishWorkflowState provides a mock function with given fields: ctx, stateName, state, ops
func (_m *MockNatsService) PublishWorkflowState(ctx context.Context, stateName string, state *model.WorkflowState, ops ...storage.PublishOpt) error {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stateName, state)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.WorkflowState, ...storage.PublishOpt) error); ok {
		r0 = rf(ctx, stateName, state, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutTaskSpec provides a mock function with given fields: ctx, spec
func (_m *MockNatsService) PutTaskSpec(ctx context.Context, spec *model.TaskSpec) (string, error) {
	ret := _m.Called(ctx, spec)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TaskSpec) (string, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TaskSpec) string); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TaskSpec) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordHistoryActivityComplete provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryActivityComplete(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordHistoryActivityExecute provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryActivityExecute(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordHistoryProcessAbort provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessAbort(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordHistoryProcessComplete provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessComplete(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordHistoryProcessSpawn provides a mock function with given fields: ctx, state, newProcessInstanceID
func (_m *MockNatsService) RecordHistoryProcessSpawn(ctx context.Context, state *model.WorkflowState, newProcessInstanceID string) error {
	ret := _m.Called(ctx, state, newProcessInstanceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState, string) error); ok {
		r0 = rf(ctx, state, newProcessInstanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordHistoryProcessStart provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessStart(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveState provides a mock function with given fields: ctx, id, state
func (_m *MockNatsService) SaveState(ctx context.Context, id string, state *model.WorkflowState) error {
	ret := _m.Called(ctx, id, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.WorkflowState) error); ok {
		r0 = rf(ctx, id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAbort provides a mock function with given fields: processor
func (_m *MockNatsService) SetAbort(processor services.AbortFunc) {
	_m.Called(processor)
}

// SetCompleteActivity provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteActivity(processor services.CompleteActivityFunc) {
	_m.Called(processor)
}

// SetCompleteActivityProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteActivityProcessor(processor services.CompleteActivityProcessorFunc) {
	_m.Called(processor)
}

// SetCompleteJobProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteJobProcessor(processor services.CompleteJobProcessorFunc) {
	_m.Called(processor)
}

// SetEventProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetEventProcessor(processor services.EventProcessorFunc) {
	_m.Called(processor)
}

// SetLaunchFunc provides a mock function with given fields: processor
func (_m *MockNatsService) SetLaunchFunc(processor services.LaunchFunc) {
	_m.Called(processor)
}

// SetMessageProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetMessageProcessor(processor services.MessageProcessorFunc) {
	_m.Called(processor)
}

// SetTraversalProvider provides a mock function with given fields: provider
func (_m *MockNatsService) SetTraversalProvider(provider services.TraversalFunc) {
	_m.Called(provider)
}

// Shutdown provides a mock function with given fields:
func (_m *MockNatsService) Shutdown() {
	_m.Called()
}

// StartProcessing provides a mock function with given fields: ctx
func (_m *MockNatsService) StartProcessing(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreWorkflow provides a mock function with given fields: ctx, wf
func (_m *MockNatsService) StoreWorkflow(ctx context.Context, wf *model.Workflow) (string, error) {
	ret := _m.Called(ctx, wf)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow) (string, error)); ok {
		return rf(ctx, wf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow) string); ok {
		r0 = rf(ctx, wf)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Workflow) error); ok {
		r1 = rf(ctx, wf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// XDestroyProcessInstance provides a mock function with given fields: ctx, state
func (_m *MockNatsService) XDestroyProcessInstance(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockNatsService creates a new instance of MockNatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNatsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNatsService {
	mock := &MockNatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
