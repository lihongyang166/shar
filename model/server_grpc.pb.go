// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: server.proto

package model

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharClient is the client API for Shar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharClient interface {
	StoreWorkflow(ctx context.Context, in *Process, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	LaunchWorkflow(ctx context.Context, in *LaunchWorkflowRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, opts ...grpc.CallOption) (Shar_ListWorkflowInstanceClient, error)
	GetWorkflowInstanceStatus(ctx context.Context, in *GetWorkflowInstanceStatusRequest, opts ...grpc.CallOption) (*WorkflowInstanceStatus, error)
	CancelWorkflowInstance(ctx context.Context, in *CancelWorkflowInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sharClient struct {
	cc grpc.ClientConnInterface
}

func NewSharClient(cc grpc.ClientConnInterface) SharClient {
	return &sharClient{cc}
}

func (c *sharClient) StoreWorkflow(ctx context.Context, in *Process, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/Shar/StoreWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharClient) LaunchWorkflow(ctx context.Context, in *LaunchWorkflowRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/Shar/LaunchWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharClient) ListWorkflowInstance(ctx context.Context, in *ListWorkflowInstanceRequest, opts ...grpc.CallOption) (Shar_ListWorkflowInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shar_ServiceDesc.Streams[0], "/Shar/ListWorkflowInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &sharListWorkflowInstanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Shar_ListWorkflowInstanceClient interface {
	Recv() (*WorkflowInstanceInfo, error)
	grpc.ClientStream
}

type sharListWorkflowInstanceClient struct {
	grpc.ClientStream
}

func (x *sharListWorkflowInstanceClient) Recv() (*WorkflowInstanceInfo, error) {
	m := new(WorkflowInstanceInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sharClient) GetWorkflowInstanceStatus(ctx context.Context, in *GetWorkflowInstanceStatusRequest, opts ...grpc.CallOption) (*WorkflowInstanceStatus, error) {
	out := new(WorkflowInstanceStatus)
	err := c.cc.Invoke(ctx, "/Shar/GetWorkflowInstanceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharClient) CancelWorkflowInstance(ctx context.Context, in *CancelWorkflowInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Shar/CancelWorkflowInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharServer is the server API for Shar service.
// All implementations must embed UnimplementedSharServer
// for forward compatibility
type SharServer interface {
	StoreWorkflow(context.Context, *Process) (*wrappers.StringValue, error)
	LaunchWorkflow(context.Context, *LaunchWorkflowRequest) (*wrappers.StringValue, error)
	ListWorkflowInstance(*ListWorkflowInstanceRequest, Shar_ListWorkflowInstanceServer) error
	GetWorkflowInstanceStatus(context.Context, *GetWorkflowInstanceStatusRequest) (*WorkflowInstanceStatus, error)
	CancelWorkflowInstance(context.Context, *CancelWorkflowInstanceRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSharServer()
}

// UnimplementedSharServer must be embedded to have forward compatible implementations.
type UnimplementedSharServer struct {
}

func (UnimplementedSharServer) StoreWorkflow(context.Context, *Process) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreWorkflow not implemented")
}
func (UnimplementedSharServer) LaunchWorkflow(context.Context, *LaunchWorkflowRequest) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchWorkflow not implemented")
}
func (UnimplementedSharServer) ListWorkflowInstance(*ListWorkflowInstanceRequest, Shar_ListWorkflowInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflowInstance not implemented")
}
func (UnimplementedSharServer) GetWorkflowInstanceStatus(context.Context, *GetWorkflowInstanceStatusRequest) (*WorkflowInstanceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowInstanceStatus not implemented")
}
func (UnimplementedSharServer) CancelWorkflowInstance(context.Context, *CancelWorkflowInstanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflowInstance not implemented")
}
func (UnimplementedSharServer) mustEmbedUnimplementedSharServer() {}

// UnsafeSharServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharServer will
// result in compilation errors.
type UnsafeSharServer interface {
	mustEmbedUnimplementedSharServer()
}

func RegisterSharServer(s grpc.ServiceRegistrar, srv SharServer) {
	s.RegisterService(&Shar_ServiceDesc, srv)
}

func _Shar_StoreWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharServer).StoreWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shar/StoreWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharServer).StoreWorkflow(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shar_LaunchWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharServer).LaunchWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shar/LaunchWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharServer).LaunchWorkflow(ctx, req.(*LaunchWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shar_ListWorkflowInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWorkflowInstanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SharServer).ListWorkflowInstance(m, &sharListWorkflowInstanceServer{stream})
}

type Shar_ListWorkflowInstanceServer interface {
	Send(*WorkflowInstanceInfo) error
	grpc.ServerStream
}

type sharListWorkflowInstanceServer struct {
	grpc.ServerStream
}

func (x *sharListWorkflowInstanceServer) Send(m *WorkflowInstanceInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Shar_GetWorkflowInstanceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowInstanceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharServer).GetWorkflowInstanceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shar/GetWorkflowInstanceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharServer).GetWorkflowInstanceStatus(ctx, req.(*GetWorkflowInstanceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shar_CancelWorkflowInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharServer).CancelWorkflowInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shar/CancelWorkflowInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharServer).CancelWorkflowInstance(ctx, req.(*CancelWorkflowInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shar_ServiceDesc is the grpc.ServiceDesc for Shar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Shar",
	HandlerType: (*SharServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreWorkflow",
			Handler:    _Shar_StoreWorkflow_Handler,
		},
		{
			MethodName: "LaunchWorkflow",
			Handler:    _Shar_LaunchWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowInstanceStatus",
			Handler:    _Shar_GetWorkflowInstanceStatus_Handler,
		},
		{
			MethodName: "CancelWorkflowInstance",
			Handler:    _Shar_CancelWorkflowInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListWorkflowInstance",
			Handler:       _Shar_ListWorkflowInstance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
