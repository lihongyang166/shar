// Code generated by mockery v2.43.1. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	header "gitlab.com/shar-workflow/shar/common/header"

	model "gitlab.com/shar-workflow/shar/model"
)

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// authForNamedWorkflow provides a mock function with given fields: ctx, name
func (_m *MockAuth) authForNamedWorkflow(ctx context.Context, name string) (context.Context, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for authForNamedWorkflow")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_authForNamedWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authForNamedWorkflow'
type MockAuth_authForNamedWorkflow_Call struct {
	*mock.Call
}

// authForNamedWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAuth_Expecter) authForNamedWorkflow(ctx interface{}, name interface{}) *MockAuth_authForNamedWorkflow_Call {
	return &MockAuth_authForNamedWorkflow_Call{Call: _e.mock.On("authForNamedWorkflow", ctx, name)}
}

func (_c *MockAuth_authForNamedWorkflow_Call) Run(run func(ctx context.Context, name string)) *MockAuth_authForNamedWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authForNamedWorkflow_Call) Return(_a0 context.Context, _a1 error) *MockAuth_authForNamedWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_authForNamedWorkflow_Call) RunAndReturn(run func(context.Context, string) (context.Context, error)) *MockAuth_authForNamedWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// authForNonWorkflow provides a mock function with given fields: ctx
func (_m *MockAuth) authForNonWorkflow(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for authForNonWorkflow")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_authForNonWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authForNonWorkflow'
type MockAuth_authForNonWorkflow_Call struct {
	*mock.Call
}

// authForNonWorkflow is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuth_Expecter) authForNonWorkflow(ctx interface{}) *MockAuth_authForNonWorkflow_Call {
	return &MockAuth_authForNonWorkflow_Call{Call: _e.mock.On("authForNonWorkflow", ctx)}
}

func (_c *MockAuth_authForNonWorkflow_Call) Run(run func(ctx context.Context)) *MockAuth_authForNonWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuth_authForNonWorkflow_Call) Return(_a0 context.Context, _a1 error) *MockAuth_authForNonWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_authForNonWorkflow_Call) RunAndReturn(run func(context.Context) (context.Context, error)) *MockAuth_authForNonWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// authForWorkflowId provides a mock function with given fields: ctx, workflowId
func (_m *MockAuth) authForWorkflowId(ctx context.Context, workflowId string) (context.Context, error) {
	ret := _m.Called(ctx, workflowId)

	if len(ret) == 0 {
		panic("no return value specified for authForWorkflowId")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, error)); ok {
		return rf(ctx, workflowId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, workflowId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_authForWorkflowId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authForWorkflowId'
type MockAuth_authForWorkflowId_Call struct {
	*mock.Call
}

// authForWorkflowId is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowId string
func (_e *MockAuth_Expecter) authForWorkflowId(ctx interface{}, workflowId interface{}) *MockAuth_authForWorkflowId_Call {
	return &MockAuth_authForWorkflowId_Call{Call: _e.mock.On("authForWorkflowId", ctx, workflowId)}
}

func (_c *MockAuth_authForWorkflowId_Call) Run(run func(ctx context.Context, workflowId string)) *MockAuth_authForWorkflowId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authForWorkflowId_Call) Return(_a0 context.Context, _a1 error) *MockAuth_authForWorkflowId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_authForWorkflowId_Call) RunAndReturn(run func(context.Context, string) (context.Context, error)) *MockAuth_authForWorkflowId_Call {
	_c.Call.Return(run)
	return _c
}

// authFromExecutionID provides a mock function with given fields: ctx, executionID
func (_m *MockAuth) authFromExecutionID(ctx context.Context, executionID string) (context.Context, *model.Execution, error) {
	ret := _m.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for authFromExecutionID")
	}

	var r0 context.Context
	var r1 *model.Execution
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, *model.Execution, error)); ok {
		return rf(ctx, executionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *model.Execution); ok {
		r1 = rf(ctx, executionID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Execution)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, executionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuth_authFromExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authFromExecutionID'
type MockAuth_authFromExecutionID_Call struct {
	*mock.Call
}

// authFromExecutionID is a helper method to define mock.On call
//   - ctx context.Context
//   - executionID string
func (_e *MockAuth_Expecter) authFromExecutionID(ctx interface{}, executionID interface{}) *MockAuth_authFromExecutionID_Call {
	return &MockAuth_authFromExecutionID_Call{Call: _e.mock.On("authFromExecutionID", ctx, executionID)}
}

func (_c *MockAuth_authFromExecutionID_Call) Run(run func(ctx context.Context, executionID string)) *MockAuth_authFromExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authFromExecutionID_Call) Return(_a0 context.Context, _a1 *model.Execution, _a2 error) *MockAuth_authFromExecutionID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuth_authFromExecutionID_Call) RunAndReturn(run func(context.Context, string) (context.Context, *model.Execution, error)) *MockAuth_authFromExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// authFromJobID provides a mock function with given fields: ctx, trackingID
func (_m *MockAuth) authFromJobID(ctx context.Context, trackingID string) (context.Context, *model.WorkflowState, error) {
	ret := _m.Called(ctx, trackingID)

	if len(ret) == 0 {
		panic("no return value specified for authFromJobID")
	}

	var r0 context.Context
	var r1 *model.WorkflowState
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, *model.WorkflowState, error)); ok {
		return rf(ctx, trackingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, trackingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *model.WorkflowState); ok {
		r1 = rf(ctx, trackingID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.WorkflowState)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, trackingID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuth_authFromJobID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authFromJobID'
type MockAuth_authFromJobID_Call struct {
	*mock.Call
}

// authFromJobID is a helper method to define mock.On call
//   - ctx context.Context
//   - trackingID string
func (_e *MockAuth_Expecter) authFromJobID(ctx interface{}, trackingID interface{}) *MockAuth_authFromJobID_Call {
	return &MockAuth_authFromJobID_Call{Call: _e.mock.On("authFromJobID", ctx, trackingID)}
}

func (_c *MockAuth_authFromJobID_Call) Run(run func(ctx context.Context, trackingID string)) *MockAuth_authFromJobID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authFromJobID_Call) Return(_a0 context.Context, _a1 *model.WorkflowState, _a2 error) *MockAuth_authFromJobID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuth_authFromJobID_Call) RunAndReturn(run func(context.Context, string) (context.Context, *model.WorkflowState, error)) *MockAuth_authFromJobID_Call {
	_c.Call.Return(run)
	return _c
}

// authFromProcessInstanceID provides a mock function with given fields: ctx, instanceID
func (_m *MockAuth) authFromProcessInstanceID(ctx context.Context, instanceID string) (context.Context, *model.ProcessInstance, error) {
	ret := _m.Called(ctx, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for authFromProcessInstanceID")
	}

	var r0 context.Context
	var r1 *model.ProcessInstance
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, *model.ProcessInstance, error)); ok {
		return rf(ctx, instanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *model.ProcessInstance); ok {
		r1 = rf(ctx, instanceID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ProcessInstance)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, instanceID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuth_authFromProcessInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authFromProcessInstanceID'
type MockAuth_authFromProcessInstanceID_Call struct {
	*mock.Call
}

// authFromProcessInstanceID is a helper method to define mock.On call
//   - ctx context.Context
//   - instanceID string
func (_e *MockAuth_Expecter) authFromProcessInstanceID(ctx interface{}, instanceID interface{}) *MockAuth_authFromProcessInstanceID_Call {
	return &MockAuth_authFromProcessInstanceID_Call{Call: _e.mock.On("authFromProcessInstanceID", ctx, instanceID)}
}

func (_c *MockAuth_authFromProcessInstanceID_Call) Run(run func(ctx context.Context, instanceID string)) *MockAuth_authFromProcessInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authFromProcessInstanceID_Call) Return(_a0 context.Context, _a1 *model.ProcessInstance, _a2 error) *MockAuth_authFromProcessInstanceID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuth_authFromProcessInstanceID_Call) RunAndReturn(run func(context.Context, string) (context.Context, *model.ProcessInstance, error)) *MockAuth_authFromProcessInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// authenticate provides a mock function with given fields: ctx
func (_m *MockAuth) authenticate(ctx context.Context) (context.Context, header.Values, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for authenticate")
	}

	var r0 context.Context
	var r1 header.Values
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, header.Values, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) header.Values); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(header.Values)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuth_authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authenticate'
type MockAuth_authenticate_Call struct {
	*mock.Call
}

// authenticate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuth_Expecter) authenticate(ctx interface{}) *MockAuth_authenticate_Call {
	return &MockAuth_authenticate_Call{Call: _e.mock.On("authenticate", ctx)}
}

func (_c *MockAuth_authenticate_Call) Run(run func(ctx context.Context)) *MockAuth_authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuth_authenticate_Call) Return(_a0 context.Context, _a1 header.Values, _a2 error) *MockAuth_authenticate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuth_authenticate_Call) RunAndReturn(run func(context.Context) (context.Context, header.Values, error)) *MockAuth_authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// authorize provides a mock function with given fields: ctx, workflowName
func (_m *MockAuth) authorize(ctx context.Context, workflowName string) (context.Context, error) {
	ret := _m.Called(ctx, workflowName)

	if len(ret) == 0 {
		panic("no return value specified for authorize")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, workflowName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth_authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'authorize'
type MockAuth_authorize_Call struct {
	*mock.Call
}

// authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowName string
func (_e *MockAuth_Expecter) authorize(ctx interface{}, workflowName interface{}) *MockAuth_authorize_Call {
	return &MockAuth_authorize_Call{Call: _e.mock.On("authorize", ctx, workflowName)}
}

func (_c *MockAuth_authorize_Call) Run(run func(ctx context.Context, workflowName string)) *MockAuth_authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth_authorize_Call) Return(_a0 context.Context, _a1 error) *MockAuth_authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth_authorize_Call) RunAndReturn(run func(context.Context, string) (context.Context, error)) *MockAuth_authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
