// Code generated by mockery v2.43.1. DO NOT EDIT.

package workflow

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/shar-workflow/shar/model"
)

// MocksetPartyFn is an autogenerated mock type for the setPartyFn type
type MocksetPartyFn struct {
	mock.Mock
}

type MocksetPartyFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksetPartyFn) EXPECT() *MocksetPartyFn_Expecter {
	return &MocksetPartyFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: exch
func (_m *MocksetPartyFn) Execute(exch *model.Exchange) (*model.Exchange, error) {
	ret := _m.Called(exch)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *model.Exchange
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Exchange) (*model.Exchange, error)); ok {
		return rf(exch)
	}
	if rf, ok := ret.Get(0).(func(*model.Exchange) *model.Exchange); ok {
		r0 = rf(exch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Exchange)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Exchange) error); ok {
		r1 = rf(exch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocksetPartyFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MocksetPartyFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - exch *model.Exchange
func (_e *MocksetPartyFn_Expecter) Execute(exch interface{}) *MocksetPartyFn_Execute_Call {
	return &MocksetPartyFn_Execute_Call{Call: _e.mock.On("Execute", exch)}
}

func (_c *MocksetPartyFn_Execute_Call) Run(run func(exch *model.Exchange)) *MocksetPartyFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Exchange))
	})
	return _c
}

func (_c *MocksetPartyFn_Execute_Call) Return(_a0 *model.Exchange, _a1 error) *MocksetPartyFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocksetPartyFn_Execute_Call) RunAndReturn(run func(*model.Exchange) (*model.Exchange, error)) *MocksetPartyFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksetPartyFn creates a new instance of MocksetPartyFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksetPartyFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksetPartyFn {
	mock := &MocksetPartyFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
