{{- /*gotype: natsgen/types.TemplateInput*/ -}}
// Code generated by nats-proto-gen-go. DO NOT EDIT.
package {{.OutputPackageName}}

import (
	"fmt"
	"context"
    "github.com/nats-io/nats.go"
    "gitlab.com/shar-workflow/nats-proto-gen-go/core"
    {{.PackagePath}}
)
{{- range .Services}}
{{- $serviceName := .Name}}
type {{$serviceName}}Client struct {
    middleware []core.Handler
    customErrorHandler core.ErrorHandler
	txConn *nats.Conn
}

func New{{$serviceName}}Client(serverNatsConnection *nats.Conn, middleware []core.Handler, customErrorHandler core.ErrorHandler) {{$serviceName}}Client {
	return {{$serviceName}}Client{
		middleware: middleware,
        customErrorHandler: customErrorHandler,
		txConn: serverNatsConnection,
    }
}

{{- range .Methods}}
func (c *{{$serviceName}}Client) {{.Name}}(ctx context.Context, req *{{$.TypePackage}}.{{.InParam.Typ}}) (*{{$.TypePackage}}.{{.OutParam.Typ}}, error) {
	res := &{{$.TypePackage}}.{{.OutParam.Typ}}{}
    if err := core.Call(ctx, c.txConn, c.middleware, c.customErrorHandler, "{{$.MessagePrefix}}{{.Name}}{{$.MessageSuffix}}", req, res); err != nil {
        return nil, fmt.Errorf("client call to {{$.MessagePrefix}}{{.Name}}{{$.MessageSuffix}}: %w", err)
    }
	return res, nil
}
{{- end}}
{{- end }}