// Code generated by mockery v2.41.0. DO NOT EDIT.

package cache

import mock "github.com/stretchr/testify/mock"

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend struct {
	mock.Mock
}

type MockBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackend) EXPECT() *MockBackend_Expecter {
	return &MockBackend_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockBackend) Get(key interface{}) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(interface{}) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBackend_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBackend_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key interface{}
func (_e *MockBackend_Expecter) Get(key interface{}) *MockBackend_Get_Call {
	return &MockBackend_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockBackend_Get_Call) Run(run func(key interface{})) *MockBackend_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockBackend_Get_Call) Return(_a0 interface{}, _a1 bool) *MockBackend_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackend_Get_Call) RunAndReturn(run func(interface{}) (interface{}, bool)) *MockBackend_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockBackend) Set(key interface{}, value interface{}) bool {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBackend_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockBackend_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key interface{}
//   - value interface{}
func (_e *MockBackend_Expecter) Set(key interface{}, value interface{}) *MockBackend_Set_Call {
	return &MockBackend_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockBackend_Set_Call) Run(run func(key interface{}, value interface{})) *MockBackend_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockBackend_Set_Call) Return(_a0 bool) *MockBackend_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_Set_Call) RunAndReturn(run func(interface{}, interface{}) bool) *MockBackend_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackend creates a new instance of MockBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackend {
	mock := &MockBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
